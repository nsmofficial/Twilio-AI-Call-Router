import { prisma } from '@/lib/prisma';

export type AgentStatus = 'available' | 'busy' | 'offline';

// Manually define the Agent type to resolve linter issues.
// This is functionally identical to the type generated by Prisma.
export interface Agent {
  id: string;
  name: string;
  phoneNumber: string;
  status: string;
  createdAt: Date;
  updatedAt: Date;
}

export const agentService = {
  /**
   * Finds the first available agent in the pool.
   * @returns {Promise<Agent | null>} The first available agent or null if none are available.
   */
  findAvailableAgent: async (): Promise<Agent | null> => {
    return prisma.agent.findFirst({
      where: { status: 'available' },
    });
  },

  /**
   * Sets the status of a specific agent.
   * @param {string} agentId - The ID of the agent to update.
   * @param {string} status - The new status for the agent.
   * @returns {Promise<Agent>} The updated agent.
   */
  setAgentStatus: async (agentId: string, status: string): Promise<Agent> => {
    return prisma.agent.update({
      where: { id: agentId },
      data: { status },
    });
  },

  /**
   * Finds an agent by their phone number.
   * @param {string} phoneNumber - The phone number to search for.
   * @returns {Promise<Agent | null>} The agent with the matching phone number.
   */
  getAgentByPhoneNumber: async (phoneNumber: string): Promise<Agent | null> => {
    return prisma.agent.findUnique({
      where: { phoneNumber },
    });
  },

  /**
   * Returns a list of all agents.
   * @returns {Promise<Agent[]>} The full list of agents.
   */
  listAgents: async (): Promise<Agent[]> => {
    return prisma.agent.findMany();
  },

  /**
   * Creates a new agent in the database.
   * @param {string} name - The name of the agent.
   * @param {string} phoneNumber - The agent's phone number.
   * @returns {Promise<Agent>} The newly created agent.
   */
  createAgent: async (name: string, phoneNumber: string): Promise<Agent> => {
    return prisma.agent.create({
      data: { name, phoneNumber, status: 'offline' },
    });
  },
}; 